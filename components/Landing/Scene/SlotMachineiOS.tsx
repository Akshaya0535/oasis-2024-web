"use client";

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, forwardRef, useState, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import * as THREE from "three";
import { useThree } from "@react-three/fiber";
import { useVideoTexture } from "@react-three/drei";

type GLTFResult = GLTF & {
  nodes: {
    Sphere003: THREE.Mesh;
    Sphere003_1: THREE.Mesh;
    Sphere003_2: THREE.Mesh;
    Sphere020: THREE.Mesh;
    Sphere020_1: THREE.Mesh;
    Sphere020_2: THREE.Mesh;
    Sphere021: THREE.Mesh;
    Sphere021_1: THREE.Mesh;
    Sphere021_2: THREE.Mesh;
    Sphere022: THREE.Mesh;
    Sphere022_1: THREE.Mesh;
    Sphere022_2: THREE.Mesh;
    Sphere001: THREE.Mesh;
    Sphere023: THREE.Mesh;
    Sphere024: THREE.Mesh;
    Sphere026: THREE.Mesh;
    Sphere025: THREE.Mesh;
    Sphere002: THREE.Mesh;
  };
  materials: {
    ["Material.040"]: THREE.MeshStandardMaterial;
    ["Material.015"]: THREE.MeshPhysicalMaterial;
    Slot1And2: THREE.MeshStandardMaterial;
    Export: THREE.MeshStandardMaterial;
  };
};

interface Props {
  video: string;
  setIs3dLoaded: (value: boolean) => void;
  iframeClick: () => void;
  setCamera: (value: any) => void;
  isVideoFocused: boolean;
}

export const SlotMachineiOS = forwardRef(function SlotMachine2(
  {
    video,
    setIs3dLoaded,
    iframeClick,
    setCamera,
    isVideoFocused,
    ...props
  }: Props,
  ref: any
) {
  const { nodes, materials } = useGLTF(
    "/Models/slotMachineHandleSeparated.glb"
  ) as GLTFResult;

  const videoMesh: any = useRef(null);

  const { camera } = useThree();

  const texture = useVideoTexture(video);

  useEffect(() => {
    if (videoMesh.current) {
      const material = new THREE.MeshBasicMaterial();
      material.map = texture;
      videoMesh.current.material = material;
    }
    setIs3dLoaded(true);
    setCamera(camera);
  }, []);

  // const { position } = useControls({
  //   position: [0, 0, 0],
  // });

  return (
    <>
      <group ref={ref} {...props} dispose={null}>
        <mesh geometry={nodes.Sphere001.geometry} material={materials.Export} />
        <mesh
          geometry={nodes.Sphere023.geometry}
          material={nodes.Sphere023.material}
          ref={videoMesh}
          position={[0, 0.488, -0.092]}
        ></mesh>
        <mesh geometry={nodes.Sphere024.geometry} material={materials.Export} />
        <mesh geometry={nodes.Sphere026.geometry} material={materials.Export} />
        <mesh geometry={nodes.Sphere025.geometry} material={materials.Export} />
        <mesh
          geometry={nodes.Sphere002.geometry}
          material={materials.Export}
          position={[-0.555, -0.143, 0.15]}
        />
        <mesh
          geometry={nodes.Sphere003.geometry}
          material={materials["Material.040"]}
        />
        <mesh
          geometry={nodes.Sphere003_1.geometry}
          material={materials["Material.015"]}
        />
        <mesh
          geometry={nodes.Sphere003_2.geometry}
          material={materials.Slot1And2}
          onClick={() => {
            console.log("yoooo");
          }}
        />
        <mesh
          geometry={nodes.Sphere020.geometry}
          material={materials["Material.040"]}
        />
        <mesh
          geometry={nodes.Sphere020_1.geometry}
          material={materials["Material.015"]}
        />
        <mesh
          geometry={nodes.Sphere020_2.geometry}
          material={materials.Slot1And2}
        />
        <mesh
          geometry={nodes.Sphere021.geometry}
          material={materials["Material.040"]}
        />
        <mesh
          geometry={nodes.Sphere021_1.geometry}
          material={materials["Material.015"]}
        />
        <mesh
          geometry={nodes.Sphere021_2.geometry}
          material={materials.Slot1And2}
        />
        <mesh
          geometry={nodes.Sphere022.geometry}
          material={materials["Material.040"]}
        />
        <mesh
          geometry={nodes.Sphere022_1.geometry}
          material={materials["Material.015"]}
        />
        <mesh
          geometry={nodes.Sphere022_2.geometry}
          material={materials.Slot1And2}
        />
      </group>
    </>
  );
});

useGLTF.preload("/Models/slotMachineHandleSeparated.glb");
