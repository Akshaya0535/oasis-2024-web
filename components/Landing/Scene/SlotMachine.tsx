"use client";

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef, forwardRef } from "react";
import { Html, useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import * as THREE from "three";

type GLTFResult = GLTF & {
  nodes: {
    Sphere011: THREE.Mesh;
    Sphere011_1: THREE.Mesh;
    Sphere011_2: THREE.Mesh;
    Sphere020: THREE.Mesh;
    Sphere020_1: THREE.Mesh;
    Sphere020_2: THREE.Mesh;
    Sphere021: THREE.Mesh;
    Sphere021_1: THREE.Mesh;
    Sphere021_2: THREE.Mesh;
    Sphere022: THREE.Mesh;
    Sphere022_1: THREE.Mesh;
    Sphere022_2: THREE.Mesh;
    Sphere001: THREE.Mesh;
    Sphere023: THREE.Mesh;
    Sphere024: THREE.Mesh;
    Sphere026: THREE.Mesh;
    Sphere025: THREE.Mesh;
  };
  materials: {
    ["Material.040"]: THREE.MeshStandardMaterial;
    ["Material.015"]: THREE.MeshPhysicalMaterial;
    Slot1And2: THREE.MeshStandardMaterial;
    Export: THREE.MeshStandardMaterial;
  };
};

interface Props {
  video: string;
  setIs3dLoaded: (value: boolean) => void;
}

export const SlotMachine = forwardRef(function SlotMachine2(
  { video, setIs3dLoaded, ...props }: Props,
  ref: any
) {
  const { nodes, materials } = useGLTF(
    "/Models/slotMachineFinal.glb"
  ) as GLTFResult;

  const screen: any = useRef();

  useEffect(() => {
    setIs3dLoaded(true);
  }, []);

  return (
    <group ref={ref} {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Sphere001.geometry}
        material={materials.Export}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Sphere023.geometry}
        material={nodes.Sphere023.material}
        position={[0, 0.488, -0.092]}
      >
        <Html
          transform
          wrapperClass="htmlScreen"
          distanceFactor={0.31000000000000005}
          position={[0, 0, 0]}
          rotation={[0.4510000000000003, 0, 0]}
        >
          <iframe
            src="https://www.youtube.com/embed/ZCrClSBM1ns"
            title="OASIS 2023 | Official Curtain Raiser"
          />
        </Html>
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Sphere024.geometry}
        material={materials.Export}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Sphere026.geometry}
        material={materials.Export}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Sphere025.geometry}
        material={materials.Export}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Sphere011.geometry}
        material={materials["Material.040"]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Sphere011_1.geometry}
        material={materials["Material.015"]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Sphere011_2.geometry}
        material={materials.Slot1And2}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Sphere020.geometry}
        material={materials["Material.040"]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Sphere020_1.geometry}
        material={materials["Material.015"]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Sphere020_2.geometry}
        material={materials.Slot1And2}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Sphere021.geometry}
        material={materials["Material.040"]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Sphere021_1.geometry}
        material={materials["Material.015"]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Sphere021_2.geometry}
        material={materials.Slot1And2}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Sphere022.geometry}
        material={materials["Material.040"]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Sphere022_1.geometry}
        material={materials["Material.015"]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Sphere022_2.geometry}
        material={materials.Slot1And2}
      />
    </group>
  );
});

useGLTF.preload("/Models/slotMachineFinal.glb");
